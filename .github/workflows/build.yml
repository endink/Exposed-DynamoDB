# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Gradle Build And Publish

on:
  workflow_dispatch:
    inputs:
      maven_pub:
        default: "Yes"
        description: "Publish To Maven"
        required: true
        type: choice
        options:
          - "Yes"
          - "No"
      github_pub:
        default: "No"
        description: "Publish To Github"
        required: true
        type: choice
        options:
          - "Yes"
          - "No"
  release:
    types: [published]

env:
  GPG_KEY_ID: ${{ secrets.MAVEN_SIGN_KEY_ID }}
  GPG_KEY: ${{ secrets.MAVEN_SIGN_KEY }}
  GPG_PWD: ${{ secrets.MAVEN_SIGN_KEY_PWD }}
  MAVEN_USER: ${{ secrets.MAVEN_USER_NAME }}
  MAVEN_KEY: ${{ secrets.MAVEN_USER_PWD }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  PUB_MAVEN: ${{ github.event.inputs.maven_pub || 'Yes' }}
  PUB_GITHUB: ${{ github.event.inputs.github_pub || 'No' }}
  JVM_SETTINGS: "-Xmx4g -XX:MaxMetaspaceSize=512m -XX:+HeapDumpOnOutOfMemoryError"

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        distribution: 'microsoft'
        java-version: 21
    - name: PGP Prepare
      run: |
       echo "Create .gpg key"
       echo "$GPG_KEY" > ./release.asc
       gpg --quiet --output $GITHUB_WORKSPACE/release.gpg --dearmor ./release.asc
       sed -i -e "s,signing.keyId=,signing.keyId=$GPG_KEY_ID,g" gradle.properties
       sed -i -e "s,signing.password=,signing.password=$GPG_PWD,g" gradle.properties
       sed -i -e "s,signing.secretKeyRingFile=,signing.secretKeyRingFile=$GITHUB_WORKSPACE/release.gpg,g" gradle.properties
       cat gradle.properties
    - name: Build with Gradle
      run: gradle clean fastBuild --no-daemon "-Dorg.gradle.jvmargs=${{ env.JVM_SETTINGS }}"
    - name: Verify Signatures
      run: |
        echo "Verifying signatures of built artifacts for all modules..."
        
        # 查找所有构建输出目录中的签名文件
        find . -path "*/build/libs/*.asc" | while read sig_file; do
         # 获取对应的原始文件（去掉 .asc 后缀）
         original_file="${sig_file%.asc}"
        
         if [ -f "$original_file" ]; then
           echo "Verifying signature for: $original_file"
        
           # 使用 GPG 验证签名
           if gpg --verify "$sig_file" "$original_file"; then
             echo "✓ Signature verified successfully for $original_file"
           else
             echo "✗ Signature verification failed for $original_file"
             exit 1
           fi
         else
           echo "Warning: No corresponding file found for signature: $sig_file"
         fi
        done
        
        # 检查是否有任何签名文件被找到
        sig_count=$(find . -path "*/build/libs/*.asc" | wc -l)
        if [ "$sig_count" -eq "0" ]; then
         echo "Warning: No signature files found in build output directories"
         echo "Listing build directories for debugging:"
         find . -name "build" -type d | while read build_dir; do
           echo "Contents of $build_dir/libs:"
           ls -la "$build_dir/libs/" 2>/dev/null || echo "  No libs directory"
         done
         exit 1
        else
         echo "Found $sig_count signature files, all verified successfully!"
        fi
    - name: Publish to GitHub Packages
      if: ${{ env.PUB_GITHUB == 'Yes' }}
      run: gradle publishToGitHubPackages
    - name: Publish to Maven Central
      if: ${{ env.PUB_MAVEN == 'Yes' }}
      run: gradle publishToSonatype closeAndReleaseSonatypeStagingRepository